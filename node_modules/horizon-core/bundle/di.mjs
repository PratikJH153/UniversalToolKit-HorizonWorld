const container = new Map();
const provide = (key, value) => {
    return container.set(key, value);
};
const inject = (key) => {
    var item = container.get(key);
    if (typeof item == 'function' && item.name) {
        item = new item();
    }
    return item;
};
const scope = (hande) => {
    const dump = Object.fromEntries(container.entries());
    const returnToDump = () => {
        for (const key of Object.keys(dump)) {
            container.set(key, dump[key]);
        }
        for (const key of Object.getOwnPropertySymbols(dump)) {
            container.set(key, dump[key]);
        }
    };
    const result = hande();
    if (result instanceof Promise) {
        return result.then(e => {
            returnToDump();
            return e;
        });
    }
    returnToDump();
    return void 0;
};
export const DI = {
    createKey() { return Symbol(); },
    provide,
    inject,
    scope
};
export default DI;
