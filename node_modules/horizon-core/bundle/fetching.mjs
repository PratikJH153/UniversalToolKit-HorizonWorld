import { useAsyncCallback } from "./composables.mts";
import { toURLString } from "./helpers.mts";
import { useSyncSignal } from "./shared.mts";
import { unSignal, useSignal } from "./stateble.mts";
export const useFetch = (url, options = {}) => {
    const { cacheControl: cacheControler, key: cacheKey, cacheTimeout } = options;
    const response = cacheKey
        ? useSignal(options.defaultValue ?? null)
        : useSyncSignal(options.defaultValue ?? null);
    const status = useSignal(0);
    const error = useSignal(false);
    const fetchHandle = useAsyncCallback(async () => {
        const type = options.type ?? 'json';
        if (cacheControler && cacheKey) {
            const data = cacheControler.read(unSignal(cacheKey));
            if (data) {
                response.value = data;
                status.value = 200;
                error.value = false;
                return fetchHandle;
            }
        }
        await fetch(toURLString(url), options)
            .then(async (e) => {
            error.value = !e.ok;
            status.value = e.status;
            if (type == 'text') {
                response.value = await e.text();
                return response.value;
            }
            try {
                response.value = await e[type]();
                if (cacheControler && cacheKey) {
                    cacheControler.write(unSignal(cacheKey), response.value, cacheTimeout);
                }
                return response.value;
            }
            catch (_) {
                console.error(_);
                error.value = true;
                response.value = await e.text();
                return response.value;
            }
        });
        return fetchHandle;
    });
    Object.defineProperty(fetchHandle, 'response', { get: () => response });
    Object.defineProperty(fetchHandle, 'fetching', { get: () => fetchHandle.process.value });
    Object.defineProperty(fetchHandle, 'status', { get: () => status.value });
    Object.defineProperty(fetchHandle, 'error', { get: () => status.value });
    return (options.immediate ?? true) ? fetchHandle() : fetchHandle;
};
