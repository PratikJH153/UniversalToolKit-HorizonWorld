import { useLocalStorage } from "./composables.mts";
import { useComputed, useSignal, useStrongRef } from "./stateble.mts";
let fallbackLocale = "en";
let registeredLocales = [];
let translations = {};
const current = useLocalStorage("i18n_locale", {
    safeValue: () => fallbackLocale,
});
export const defineI18n = (config) => {
    fallbackLocale = config.fallbackLocale ?? "en";
    registeredLocales = config.locales ?? [];
    translations = config.translation;
};
export const useI18n = () => {
    const tryLocalePhrase = (locale, phrase) => {
        return translations[locale]?.[phrase] ?? phrase;
    };
    const i18n = {
        getLocales() {
            return registeredLocales;
        },
        setFallbackLocale(locale) {
            fallbackLocale = locale;
        },
        getFallbackLocale() {
            return fallbackLocale;
        },
        setLocale(locale) {
            if (registeredLocales.includes(locale)) {
                return (current.value = locale, true);
            }
            return (current.value = fallbackLocale, false);
        },
        getLocale() {
            return current.value;
        },
        s(phrase) {
            return tryLocalePhrase(current.value, phrase);
        },
        t(phrase) {
            return useSignal(phrase, {
                safeValue: phrase,
                key: `i18n_${phrase}`,
                onInit(signal) {
                    useStrongRef(current, () => {
                        signal.value = tryLocalePhrase(current.value, phrase);
                    });
                },
            });
        },
        c(phrase, handle) {
            const phraseSignal = i18n.t(phrase);
            return useComputed(() => {
                return handle(phraseSignal.value);
            });
        },
        current,
    };
    return i18n;
};
