'use strict';
const Log = require('./log.class.js');

const ONE_ITEM_ARRAY = 1;

/**
 * @module ForwardEvents
 * @description An utility to forwared events from one event emitter to another
 */

module.exports = {
	fromPoolToHorizon: (pool, horizon) => {

		[
			['scaleUp', 'info'],
			['scaleDown', 'info'],
			['error', 'error'],
			['empty', 'warn']
		].forEach(([sourceEvent, level]) => {

			pool.on(sourceEvent, (...metadata) => {
				horizon.emit(
					'log',
					new Log({
						sourceType:'pool',
						sourceEvent,
						level,
						source:pool,
						metadata
					})
				);
			});

		});

	},
	fromServerToHorizon: (server, horizon) => {

		[
			['error', 'error'],
			['close', 'info'],
			['secureConnection', 'info'],
			['connection', 'info']
		].forEach(([sourceEvent, level]) => {

			server.on(sourceEvent, (...metadata) => {
				horizon.emit(
					'log',
					new Log({
						sourceType:'server',
						sourceEvent,
						level,
						source:server,
						metadata
					})
				);
			});

		});

	},
	fromDatabaseToHorizon: (database, horizon) => {

		[
			['debug', 'debug'],
			['info', 'info'],
			['warn', 'warn'],
			['error', 'error']
		].forEach(([eventName, level]) => {

			database.on(eventName, (...metadata) => {

				const sourceEvent = metadata.shift();

				if (metadata.length === ONE_ITEM_ARRAY)
					metadata = metadata.shift();

				horizon.emit(
					'log',
					new Log({
						sourceType:'database',
						sourceEvent,
						level,
						source:database,
						metadata
					})
				);

			});

		});

	},
	fromServiceToHorizon: (service, horizon) => {

		[
			['debug', 'debug'],
			['info', 'info'],
			['warn', 'warn'],
			['error', 'error']
		].forEach(([eventName, level]) => {

			service.on(eventName, (...metadata) => {

				const sourceEvent = metadata.shift();

				if (metadata.length === ONE_ITEM_ARRAY)
					metadata = metadata.shift();

				horizon.emit(
					'log',
					new Log({
						sourceType:'service',
						sourceEvent,
						level,
						source:service,
						metadata
					})
				);

			});

		});

	},
	fromLoggerToHorizon: (logger, horizon) => {

		[
			'debug',
			'info',
			'warn',
			'error'
		].forEach((level) => {

			logger[level] = (source, sourceEvent, ...metadata) => {

				if (metadata.length === ONE_ITEM_ARRAY)
					metadata = metadata.shift();

				horizon.emit(
					'log',
					new Log({
						sourceType:metadata.sourceType || 'process',
						sourceEvent,
						level,
						source,
						metadata
					})
				);

			};

		});

	}
};