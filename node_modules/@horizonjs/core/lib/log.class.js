'use strict';
const util = require('util');

/**
 * @class Simple class to create log entries
 */
class Log {

	/**
	 * Defines log data
	 * @param  {string} options.sourceType  String with source type, this must be the source type of the log entry
	 * @param  {string} options.sourceEvent To which event log is associated
	 * @param  {string} options.level       Level of log
	 * @param  {Object} options.source      Source class instance of the log
	 * @param  {*} options.metadata    Optional metadata
	 */
	constructor ({sourceType,sourceEvent,level,source,metadata}) {

		this._data = Object.freeze({
			source_type:sourceType || null,
			source_event:sourceEvent || null,
			level:level || null,
			source:source || null,
			metadata:metadata || null,
			timestamp: Date.now()
		});

	}

	/**
	 * @return {string}
	 */
	get sourceType () {
		return this._data.source_type;
	}

	/**
	 * @return {string}
	 */
	get sourceEvent () {
		return this._data.source_event;
	}

	/**
	 * @return {string}
	 */
	get level () {
		return this._data.level;
	}

	/**
	 * @return {Object}
	 */
	get source () {
		return this._data.source;
	}

	/**
	 * @return {*}
	 */
	get metadata () {
		return this._data.metadata;
	}

	/**
	 * Log's timestamp
	 * @return {integer} Unix timestamp
	 */
	get timestamp () {
		return this._data.timestamp;
	}

	/**
	 * Extracts the source's name
	 * @param  {*} source Source of log
	 * @return {string|*}        The name as string if it was possible to extract
	 */
	static extractInstanceName (source) {

		if (source !== null && typeof source === 'object') {

			if (source.constructor)
				return source.constructor.name;

			return Object.getPrototypeOf(source).name;

		}

		return source;

	}

	/**
	 * Parses log into serializable object
	 * @return {Object} A serializable object
	 */
	_parseDataIntoSerializable () {

		const serializable = Object.assign({}, this._data);

		serializable.source = Log.extractInstanceName(serializable.source);

		return serializable;

	}

	/**
	 * Parses log into serialized JSON object
	 * @param  {string} spacer Spacer to be used when stringifying into JSON
	 * @return {string}        Serialized JSON object
	 */
	toString (spacer = null) {

		const serializable = this._parseDataIntoSerializable();

		return JSON.stringify(serializable, null, spacer);

	}

	/**
	 * Returns a printable string to inspect log
	 * @return {string} Printable string to inspect log
	 */
	inspect () {

		const serializable = this._parseDataIntoSerializable();

		return util.inspect(serializable, {
			showProxy:false,
			colors:true,
			depth:null
		});

	}

}

module.exports = Log;