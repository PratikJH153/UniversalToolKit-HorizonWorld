'use strict';
const EventEmitter = require('events');
const Promise = require('bluebird');
const assert = require('assert');

/**
 * @class This is an abstract class to implement databases.
 */
class Database extends EventEmitter {

	/**
	 * The constructor just defines accepted arguments.
	 * @param  {Map} databaseFiles A Map of files for the database, the map will be generated from resources,
	 *                             and must be ended with "your_database_name.database". Maps keys are
	 *                             files names and values are files content.
	 * @param  {Object} options       Custom options of databases
	 */
	constructor (databaseFiles, options = {}) {

		assert.ok(databaseFiles instanceof Map);
		assert.ok(typeof options === 'object');

		super();

	}

	/**
	 * All databases plugins must implement this method, used to initialize connection with database.
	 * @return {Promise<Object>} This method MUST return a Promise resolving to an Object with two properties:
	 *                                * databaseName: a string that will be used as database name for Horizon
	 *                                injection as "horizon.Databases.YourDatabaseName"
	 *                                * databaseInstance: the value associated with the injected value by Horizon
	 */
	connect () {

		return Promise.resolve({
			databaseName:'Empty',
			databaseInstance:this
		});

	}

}

module.exports = Database;