'use strict';
const EventEmitter = require('events');

/**
 * @class Abstract class that services must extend
 */
class Service extends EventEmitter {

	/**
	 * Just create the _methods attribute that MUST be a Map pointing to exposed methods of service
	 */
	constructor () {

		super();

		this._methods = new Map();

	}

	/**
	 * Add exposed methods of service by method name
	 * @param {...string} methods Method name of the service
	 * @return {this}
	 */
	addServiceMethods (...methods) {

		for (const method of methods)
			this._methods.set(method, (...args) => {

				const callback = args.pop();

				this[method](...args).then((result) => {
					callback(null, result);
				}).catch((error) => {
					callback(error);
				});

			});

		return this;

	}

	/**
	 * Used by horizon, create an Object where keys are methods names and values are
	 * functions receiving Thrift service calls
	 * @return {Object} The binded object
	 */
	bindServiceMethods () {

		const bindings = {};

		for (const [method, methodFunction] of this._methods)
			bindings[method] = methodFunction;

		return bindings;

	}

}

module.exports = Service;