'use strict';
const { Horizon } = require('../');
const BookStorage = require('./services/book-storage.service.js');
const MockDB = require('./database/mockdb.class.js');
const util = require('util');

const microservice = new Horizon({
	// Path where Horizon will load thrift, schemas and database files
	resourcesPath:'./microservice-resources'
});

// Handle CTRL+C
process.on('SIGINT', () => {
	// Close our services
	microservice.close().then(() => {
		// Deletes the resource path, you really don't need to do this
		return microservice.clearResources();	
	});
});

microservice.on('log', (log) => {

	// We want to see our connected clients
	if (log.sourceEvent === 'connection') {
		
		const socket = log.metadata.pop();

		return console.log('CONNECTION:', `${socket.remoteAddress}:${socket.remotePort}`);

	}

	console.log('LOG:', log.inspect());

}).addResourceProvider({ // Resources from local directory
	directory:'./assets',
	files:[
		'book.thrift',
		'book.schema.json'
	]
}).acquireResources().then(() => { // Loads resources
	// Compile Thrift types and services
	return microservice.compileThrift();
}).then(() => {
	// Compile JSON Schemas
	return microservice.compileSchemas();
}).then(() => {
	// Connect to MockDB
	return microservice.connectDatabase(MockDB);
}).then(() => {
	// Provide our service
	return microservice.provideService(BookStorage);
}).then(() => {
	// Expose our service
	return microservice.run();
}).then(() => {

	console.log('Microservice is listening, information:');
	console.log(util.inspect(microservice.information().services, false, null));

});