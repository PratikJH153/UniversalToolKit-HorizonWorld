'use strict';
const { Database } = require('../../');
const Promise = require('bluebird');

/**
 * @class Class to simulate a database component
 */
class MockDB extends Database {

	/**
	 * @param  {Map} databaseFiles No files are needed here
	 * @param  {Object} options       The only option is the databaseName
	 */
	constructor (databaseFiles, options = {}) {

		super(databaseFiles, options);

		this._options = Object.assign(
			{
				databaseName:'MockDB'
			},
			options
		);

		this._database = new Map();

	}

	/**
	 * Saves an object, objects must have uuid attribute
	 * @param  {Object} object Object to be saved
	 * @return {[type]}        [description]
	 */
	save (object) {

		const {uuid} = object;

		if (!uuid)
			throw new Error(`Object needs uuid`);

		this._database.set(uuid, Object.assign({}, object));

		this.emit('info', 'objectSaved', object);

		return this;

	}

	/**
	 * Finds an objects by field value
	 * @param  {string} field Field name
	 * @param  {*} value Value to match objects
	 * @return {Set}       Set with found objects
	 */
	findBy (field, value) {

		const results = new Set();

		for (const [uuid, object] of this._database) {

			if (object[field] === value)
				results.add(Object.assign({}, object));

		}

		return results;

	}

	/**
	 * Returns an object by uuid
	 * @param  {string} uuid uuid of object
	 * @return {null|Object}      null if there's no object with the provided uuid
	 */
	get (uuid) {

		if (!this._database.has(uuid))
			return null;

		return Object.assign({}, this._database.get(uuid));

	}

	/**
	 * Connects the database
	 * @return {Promise<Object>} A Promise resolving to Object with database name and instance
	 */
	connect () {

		return Promise.resolve({
			databaseName:this._options.databaseName,
			databaseInstance:this
		});

	}

}

module.exports = MockDB