'use strict';
const { Service } = require('../../');
const Promise = require('bluebird');
const uuidv4 = require('uuid/v4');

/**
 * @class BookStorage service
 * @description Service to store books entries
 */
class BookStorage extends Service {

	constructor () {
		
		super();

		// Here we expose our service methods
		this.addServiceMethods(
			'save',
			'get',
			'findByCategory'
		);

	}

	/**
	 * Saves a book
	 * @param  {Object} book The book entry
	 * @return {Promise<Book>}      A Promise resolving to a Book type
	 */
	save (book) {

		return BookStorage.Schemas.Book(book).then((book) => {

			if (!Reflect.has(book, 'uuid'))
				book.uuid = uuidv4();

			BookStorage.Databases.MockDB.save(book);

			this.emit('info', 'save', book);

			return book;

		});

	}

	/**
	 * Gets book by uuid
	 * @param  {string} uuid The uuid of book
	 * @return {Promise<Book>}      A Promise resolving to Book type
	 */
	get (uuid) {

		const bookObject = BookStorage.Databases.MockDB.get(uuid);

		if (!bookObject) {

			this.emit('warn', 'get', `Book not found: ${uuid}`);

			return Promise.reject(new Error('Book not found'));

		}

		return Promise.resolve(
			new BookStorage.Types.Book(bookObject)
		);

	}

	/**
	 * Find books by category
	 * @param  {string} category The category of books
	 * @return {Promise<Array<Book>>}          A Promise with books that match the category
	 */
	findByCategory (category) {

		return Promise.resolve(
			Array.from(
				BookStorage.Databases.MockDB.findBy('category', category)
			).map((bookObject) => new BookStorage.Types.Book(bookObject))
		);

	}

}

module.exports = BookStorage;