'use strict';
const should = require('chai').should();
const Horizon = require('../lib/horizon.class.js');
const EventEmitter = require('events');
const path = require('path');
const MockDB = require('../examples/database/mockdb.class.js');
const BookStorage = require('../examples/services/book-storage.service.js');
const uuidv4 = require('uuid/v4');

describe('Horizon class definition', function () {

	describe('Instantiating', function () {

		const microservice = new Horizon();

		it('Should have a resources path', function () {

			microservice.should.to.have.property('_resourcesPath').that.is.a('string').that.is.not.empty;

		});

		it('Should inherit EventEmitter', function () {

			microservice.should.to.be.instanceOf(EventEmitter);

		});

		it('Should have Types', function () {

			microservice.should.to.have.property('Types').that.is.an('object');

		});

		it('Should have Services', function () {

			microservice.should.to.have.property('Services').that.is.an('object');

		});

		it('Should have Clients', function () {

			microservice.should.to.have.property('Clients').that.is.an('object');

		});

		it('Should have Databases', function () {

			microservice.should.to.have.property('Databases').that.is.an('object');

		});

		it('Should have Schemas', function () {

			microservice.should.to.have.property('Databases').that.is.an('object');

		});

	});

});

describe('Horizon building', function () {

	const microservice = new Horizon({
		resourcesPath:path.join(__dirname, 'resources')
	});
	const uuid = uuidv4();
	const category = 'science';

	describe('Adding thrift resources', function () {

		it('Should accept URLs', function () {

			microservice.addResourceProvider({
				url:'https://raw.githubusercontent.com/apache/thrift/master/lib/nodejs/examples',
				files:[
					'user.thrift'
				]
			});

			microservice.should.to.have.property('_resourceProviders').that.is.an('array').have.lengthOf(1);

		});

		it('Should accept directories', function () {

			microservice.addResourceProvider({
				directory:path.join(__dirname, '../examples/assets'),
				files:[
					'book.thrift',
					'book.schema.json'
				]
			});

			microservice.should.to.have.property('_resourceProviders').that.is.an('array').have.lengthOf(2);

		});

		it('Should acquire resources', function () {

			return microservice.acquireResources();

		});

	});

	describe('Building resources', function () {

		it('Should compile Thrift services and types', function () {

			return microservice.acquireResources().then(() => {
				return microservice.compileThrift();	
			}).then(() => {

				microservice.Services.should.have.property('BookStorage').that.is.an('object');
				microservice.Services.should.have.property('UserStorage').that.is.an('object');
				microservice.Types.should.have.property('Book').that.is.a('function');
				microservice.Types.should.have.property('UserProfile').that.is.a('function');

			});

		});

		it('Should compile JSON Schemas', function () {

			return microservice.compileSchemas().then(() => {

				microservice.Schemas.Book.should.be.a('function');

			});

		});

	});

	describe('Databases', function () {

		it('Should connect to MockDB', function () {

			return microservice.connectDatabase(MockDB).then(() => {

				microservice.Databases.should.have.property('MockDB').that.is.instanceOf(MockDB);

			});

		});

	});

	describe('Services', function () {

		it('Should provide BookStorage service', function () {

			return microservice.provideService(BookStorage).then(() => {

				const information = microservice.information();

				information.should.be.an('object').have.property('services');

				const services = information.services;

				services.should.have.property('BookStorage');

			});

		});

		it('Should listen for connections to services', function () {

			return microservice.run().then(() => {

				const service = microservice.information().services.BookStorage;

				service.should.be.an('object').that.have.property('server').that.is.an('object').have.property('address');

				service.server.should.be.an('object').have.property('port').that.is.equal(50000);

			});

		});

		it('Should connect to BookStorage service', function () {

			return microservice.connectService(microservice.Services.BookStorage, 'localhost', 50000);

		});

		it('Should create a book', function () {

			const book = new microservice.Types.Book({
				uuid,
				category,
				title:'Leviathan',
				author:'Thomas Hobbes'
			})

			return microservice.Clients.BookStorage.save(book);

		});

		it('Should get book by uuid', function () {

			return microservice.Clients.BookStorage.get(uuid).then((book) => {
				book.should.be.an('object').and.instanceOf(microservice.Types.Book);
			});

		});

		it('Should find book by category', function () {

			return microservice.Clients.BookStorage.findByCategory(category).then((books) => {

				books.should.be.an('array').that.have.lengthOf(1);

				for (const book of books) {
					book.should.be.an('object').and.instanceOf(microservice.Types.Book);
				}

			});

		});

		it('Should disconnect from BookStorage service', function () {

			return microservice.disconnectService(microservice.Services.BookStorage).then(() => {

				const information = microservice.information();

				Object.keys(information.pools).should.be.an('array').that.have.lengthOf(0);

			});

		});

		it('Should close all servers', function () {

			return microservice.close().then(() => {
				
				const information = microservice.information();

				information.services.BookStorage.should.have.property('server').that.is.equal(null);

			});

		});

		it('Should clear resources', function () {

			return microservice.clearResources();

		});

	});

});